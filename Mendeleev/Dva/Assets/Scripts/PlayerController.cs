//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Dva
{
    public partial class @PlayerController : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerController()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""KeyBoard"",
            ""id"": ""ebbfd932-c92a-4b80-87f7-6ca9056e3f67"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1272ce6c-d6f3-4a9c-a651-dd658ad3faa0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""089eb07a-b461-4c5d-bc06-7ef6633d35d0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0525e359-60e9-4456-a538-6c7b7b60e808"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6edb5b30-9882-49aa-946c-0dfc095eac18"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7b304fde-ef2b-4d1d-ba11-b9550e5a0695"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3b49ff2b-00f4-4f2d-b6b2-7bfd275fd5a4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Sensor"",
            ""id"": ""86cf0f8a-e6e1-42ee-bf3d-b1ae661e6e7c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c545ea71-8530-4db2-a7d4-e951b996f9b3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""868895ce-d836-4130-bceb-45593747a491"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""90759213-feb9-4878-acd6-c4da79738bbd"",
                    ""path"": ""<Touchscreen>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""94032256-6e87-45ba-8008-ca4f361b4cab"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d869a35d-9858-42f4-901f-83fff625350d"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5da6fedb-0e1e-4df3-b023-8365334eadc4"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // KeyBoard
            m_KeyBoard = asset.FindActionMap("KeyBoard", throwIfNotFound: true);
            m_KeyBoard_Move = m_KeyBoard.FindAction("Move", throwIfNotFound: true);
            // Sensor
            m_Sensor = asset.FindActionMap("Sensor", throwIfNotFound: true);
            m_Sensor_Move = m_Sensor.FindAction("Move", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // KeyBoard
        private readonly InputActionMap m_KeyBoard;
        private IKeyBoardActions m_KeyBoardActionsCallbackInterface;
        private readonly InputAction m_KeyBoard_Move;
        public struct KeyBoardActions
        {
            private @PlayerController m_Wrapper;
            public KeyBoardActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_KeyBoard_Move;
            public InputActionMap Get() { return m_Wrapper.m_KeyBoard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(KeyBoardActions set) { return set.Get(); }
            public void SetCallbacks(IKeyBoardActions instance)
            {
                if (m_Wrapper.m_KeyBoardActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_KeyBoardActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_KeyBoardActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_KeyBoardActionsCallbackInterface.OnMove;
                }
                m_Wrapper.m_KeyBoardActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                }
            }
        }
        public KeyBoardActions @KeyBoard => new KeyBoardActions(this);

        // Sensor
        private readonly InputActionMap m_Sensor;
        private ISensorActions m_SensorActionsCallbackInterface;
        private readonly InputAction m_Sensor_Move;
        public struct SensorActions
        {
            private @PlayerController m_Wrapper;
            public SensorActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Sensor_Move;
            public InputActionMap Get() { return m_Wrapper.m_Sensor; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SensorActions set) { return set.Get(); }
            public void SetCallbacks(ISensorActions instance)
            {
                if (m_Wrapper.m_SensorActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_SensorActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_SensorActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_SensorActionsCallbackInterface.OnMove;
                }
                m_Wrapper.m_SensorActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                }
            }
        }
        public SensorActions @Sensor => new SensorActions(this);
        public interface IKeyBoardActions
        {
            void OnMove(InputAction.CallbackContext context);
        }
        public interface ISensorActions
        {
            void OnMove(InputAction.CallbackContext context);
        }
    }
}
